name: Docker Image Sync

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAMESPACE: "${{ secrets.ALIYUN_NAMESPACE }}"
  ALIYUN_USER: "${{ secrets.ALIYUN_USER }}"
  ALIYUN_PASSWORD: "${{ secrets.ALIYUN_PASSWORD }}"

jobs:
  sync-images:
    name: Sync Docker Images
    runs-on: ubuntu-latest

    steps:
    - name: Free Up Disk Space
      run: |
        echo "===== Initial Disk Space ====="
        df -hT
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        echo "===== After Cleanup ====="
        df -hT

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Docker Setup
      uses: docker/setup-buildx-action@v3

    - name: Login to Aliyun
      run: |
        docker login -u $ALIYUN_USER -p $ALIYUN_PASSWORD $ALIYUN_REGISTRY

    - name: Process Images
      run: |
        while IFS= read -r line || [ -n "$line" ]; do
          # Skip comments and empty lines
          [[ -z "$line" || "$line" =~ ^\s*# ]] && continue

          # Extract original image name
          original_image=$(echo "$line" | awk '{gsub(/^[ \t]+|[ \t]+$/, ""); print}')
          original_image=${original_image%%@*}  # Remove SHA256 digest

          # Extract platform if exists
          platform=$(echo "$line" | grep -oP '--platform \K\S+' || true)
          [ -n "$platform" ] && platform_prefix="${platform//\//_}_" || platform_prefix=""

          # Parse image components
          image_name_tag=$(echo "$original_image" | awk -F'/' '{print $NF}')
          namespace=$(echo "$original_image" | awk -F'/' '{
            if (NF > 1) {
              sub(/\/[^\/]*$/, "")
              print
            }
          }')

          # Generate namespace prefix
          if [ -n "$namespace" ]; then
            namespace_prefix="${namespace//\//_}_"
          else
            namespace_prefix=""
          fi

          # Build target image name
          target_image="$ALIYUN_REGISTRY/$ALIYUN_NAMESPACE/${platform_prefix}${namespace_prefix}${image_name_tag}"

          # Execution steps
          echo "====== Processing $original_image ======"
          docker pull $original_image
          docker tag $original_image $target_image
          docker push $target_image
          
          # Cleanup
          docker rmi $original_image $target_image
          echo "====== Completed $target_image ======"
          
        done < images.txt
